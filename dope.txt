* ntlm_message.hpp
virtual destructor
write proper include guard (PAL_NTLM_MESSAGE_HPP_INCLUDED)
include the required headers (stdint.h)

* type1_message.hpp
use explicit single argument constructor
order of public/private
!repeating includes
ssp_flags_ should probably be const

* type1_message.cpp
initialize class properly
import namespaces does not improve readability (pal & std)
consider size_t instead of int (remember prefixing)
avoid magic constants(eg, const size_t flags_offset = 12;)
const member variable
... but only when it adds value (not needed for message)
prefer prefixing over opening the namespace

* type2_message.hpp
certainly do not import namespaces in header files
pass by const ref (buffer)
prefer use const methods (query/command separation)
do not use the throw specifiers (ctor)

* type2_message.cpp
include order 
avoid superfluous use of () (eg in return or sizeof)
(*) pass by const ref (buffer) 

* type3_message.hpp
prefer forward declarations
do not write explicit on multi argument constructors (due to explanation)
avoid default arguments (ssp_flags = 0x202)
star wars (place & in K&R, BS, and unified)

* type3_message.cpp
order in initializer list (-Wall and -Wextra)
complete initializer list (-Weffc++)
do not "throw new"
beware of side-effects when using iomanips (return a string instead)

----

* ntlm_message.hpp
virtual destructor
write proper include guard (PAL_NTLM_MESSAGE_HPP_INCLUDED)
include the required headers (stdint.h)

* type1_message.hpp
use explicit single argument constructor
order of public/private
!repeating includes
ssp_flags_ should probably be const

* type1_message.cpp
initialize class properly
import namespaces does not improve readability (pal & std)
consider size_t instead of int (remember prefixing)
avoid magic constants(eg, const size_t flags_offset = 12;)
const member variable
... but only when it adds value (not needed for message)
prefer prefixing over opening the namespace

* type2_message.hpp
certainly do not import namespaces in header files
pass by const ref (buffer)
prefer use const methods (query/command separation)
do not use the throw specifiers (ctor)

* type2_message.cpp
include order 
avoid superfluous use of () (eg in return or sizeof)
(*) pass by const ref (buffer) 

* type3_message.hpp
prefer forward declarations
do not write explicit on multi argument constructors (due to explanation)
avoid default arguments (ssp_flags = 0x202)
star wars (place & in K&R, BS, and unified)

* type3_message.cpp
order in initializer list (-Wall and -Wextra)
complete initializer list (-Weffc++)
do not "throw new"
beware of side-effects when using iomanips (return a string instead)

----

* ntlm_message.hpp
virtual destructor
write proper include guard (PAL_NTLM_MESSAGE_HPP_INCLUDED)
include the required headers (stdint.h)

comment after #endif
use syntax highlighting

* type1_message.hpp
use explicit single argument constructor
order of public/private
!repeating includes

repeating virtual 
avoid _prefix of local variables
(const member variable)

* type1_message.cpp
initialize class properly
import namespaces does not improve readability
consider size_t instead of int (remember prefixing)

const member variable
avoid magic constants(eg, const size_t flags_offset = 12;)
... but only when it adds value (not needed for message)
prefer prefixing over opening the namespace

* type2_message.hpp
certainly do not import namespaces in header files
pass by const ref (buffer)
prefer use const methods (query/command separation)

do not use the throw specifiers (ctor)

* type2_message.cpp
include order (what about own/std/project, hubert)
avoid superfluous use of () (eg in return or sizeof)
avoid magic numbers

(*) pass by const ref (buffer) 
prefix size_t with std
layout of array initializer (not robust)

* type3_message.hpp
prefer forward declarations
do not write explicit on multi argument constructors (due to explanation)
avoid default arguments (ssp_flags = 0x202)

star wars (place & in K&R, BS, and unified)
avoid fragile code layouts / prefer robust code layout

* type3_message.cpp
order in initializer list (-Wall and -Wextra)
complete initializer list (-Weffc++)
do not "throw new"
beware of side-effects when using iomanips (return a string instead)

use anonymous namespaces for const (but also types)
alphabetic order of includes
space after keywords
use assignment instead of initialization (data_offset)
use anonymous namespace instead of static for local (pal_internal)
sizeof(prefix) -> sizeof prefix
std::endl is implicitly flushing the stream (in ostream)
camelCase inside debugstring (sspFlags, sessionKey)
vote for enums


